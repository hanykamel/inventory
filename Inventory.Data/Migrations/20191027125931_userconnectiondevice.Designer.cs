// <auto-generated />
using System;
using Inventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventory.Data.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20191027125931_userconnectiondevice")]
    partial class userconnectiondevice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inventory.Data.Entities.Addition", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime?>("AdditionDocumentDate");

                    b.Property<string>("AdditionDocumentNumber");

                    b.Property<int?>("AdditionDocumentTypeId");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("ExaminationCommitteId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Note");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("RequestDate");

                    b.Property<string>("RequesterName");

                    b.Property<Guid?>("RobbingOrderId");

                    b.Property<int>("Serial");

                    b.Property<int>("TenantId");

                    b.Property<Guid?>("TransformationId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AdditionDocumentTypeId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("ExaminationCommitteId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RobbingOrderId");

                    b.HasIndex("TransformationId");

                    b.ToTable("Addition");
                });

            modelBuilder.Entity("Inventory.Data.Entities.AdditionAttachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AdditionId");

                    b.Property<Guid>("AttachmentId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AdditionId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("AdditionAttachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.AdditionDocumentType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AdditionDocumentType");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("AttachmentTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("FileExtention")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<long>("FileSize");

                    b.Property<string>("FileUrl")
                        .IsRequired();

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.AttachmentType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AttachmentType");
                });

            modelBuilder.Entity("Inventory.Data.Entities.BaseItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Consumed");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("DefaultUnitId");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("ItemCategoryId");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortName");

                    b.Property<int?>("WarningLevel");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUnitId");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("BaseItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookNumber");

                    b.Property<bool>("Consumed");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("PageCount");

                    b.Property<int>("StoreId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Budget", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid>("CommitteeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeAttachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeEmployee", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("EmplyeeId");

                    b.Property<Guid>("ExaminationCommitteId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsHead");

                    b.Property<int>("JobTitleId");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EmplyeeId");

                    b.HasIndex("ExaminationCommitteId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("CommitteeEmployee");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Accepted");

                    b.Property<string>("AdditionNotes");

                    b.Property<long>("BaseItemId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("ExaminationCommitteId");

                    b.Property<int>("ExaminationPercentage");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Quantity");

                    b.Property<string>("Reasons");

                    b.Property<int?>("Rejected");

                    b.Property<int>("TenantId");

                    b.Property<int>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("ExaminationCommitteId");

                    b.HasIndex("UnitId");

                    b.ToTable("CommitteeItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeItemHistory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Accepted");

                    b.Property<long>("BaseItemId");

                    b.Property<Guid>("CommitteeItemId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("ExaminationCommitteId");

                    b.Property<int>("ExaminationPercentage");

                    b.Property<int>("HistoryActionId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<int>("Quantity");

                    b.Property<string>("Reasons");

                    b.Property<int?>("Rejected");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeItemId");

                    b.HasIndex("HistoryActionId");

                    b.ToTable("CommitteeItemHistory");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExaminationCommitte", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("date");

                    b.Property<string>("ContractNumber");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<string>("DecisionNumber");

                    b.Property<int>("ExaminationStatusId");

                    b.Property<int?>("ExternalEntityId");

                    b.Property<bool>("ForConsumedItems");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OperationId");

                    b.Property<int>("Serial");

                    b.Property<int>("StoreId");

                    b.Property<int?>("SupplierId");

                    b.Property<DateTime?>("SupplyOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("SupplyOrderNumber");

                    b.Property<int>("TenantId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("ExaminationStatusId");

                    b.HasIndex("ExternalEntityId");

                    b.HasIndex("OperationId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ExaminationCommitte");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExaminationStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ExaminationStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExchangeOrder", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DirectOrderNotes");

                    b.Property<int?>("ExchangeOrderStatusId");

                    b.Property<int>("ForEmployeeId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsDirectOrder");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<int>("OperationId");

                    b.Property<int>("Serial");

                    b.Property<int>("TenantId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("ExchangeOrderStatusId");

                    b.HasIndex("ForEmployeeId");

                    b.HasIndex("OperationId");

                    b.ToTable("ExchangeOrder");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExchangeOrderStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ExchangeOrderStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExchangeOrderStoreItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("ExchangeOrderId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<Guid>("StoreItemId");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeOrderId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("ExchangeOrderStoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExternalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ExternalEntity");
                });

            modelBuilder.Entity("Inventory.Data.Entities.HistoryAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("HistoryAction");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("ExchangeOrderId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("LocationId");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("ReceivedEmployeeId");

                    b.Property<Guid?>("RobbingOrderId");

                    b.Property<int>("Serial");

                    b.Property<int>("TenantId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeOrderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReceivedEmployeeId");

                    b.HasIndex("RobbingOrderId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Inventory.Data.Entities.InvoiceStoreItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("InvoiceId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("StoreItemId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("InvoiceStoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ItemStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ItemStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Operation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Inventory.Data.Entities.OperationAttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdditionDocumentTypeId");

                    b.Property<int>("AttachmentTypeId");

                    b.Property<int?>("BudgetId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OperationId");

                    b.HasKey("Id");

                    b.HasIndex("AdditionDocumentTypeId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationAttachmentType");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrder", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ExaminationEmployeeId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<int>("OperationId");

                    b.Property<int?>("RefundOrderStatusId");

                    b.Property<int>("Serial");

                    b.Property<int>("TenantId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("ExaminationEmployeeId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RefundOrderStatusId");

                    b.ToTable("RefundOrder");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrderAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AttachmentId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RefundOrderId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("RefundOrderId");

                    b.ToTable("RefundOrderAttachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrderStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("RefundOrderStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrderStoreItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<Guid>("RefundOrderId");

                    b.Property<Guid>("StoreItemId");

                    b.Property<int>("StoreItemStatusId");

                    b.HasKey("Id");

                    b.HasIndex("RefundOrderId");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("StoreItemStatusId");

                    b.ToTable("RefundOrderStoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrder", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("BudgetId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DirectOrderNotes");

                    b.Property<int>("ForEmployeeId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsDirectOrder");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<int>("OperationId");

                    b.Property<int?>("RobbingOrderStatusId");

                    b.Property<int>("Serial");

                    b.Property<int>("TenantId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("ForEmployeeId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RobbingOrderStatusId");

                    b.ToTable("RobbingOrder");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrderAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AttachmentId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RobbingOrderId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("RobbingOrderId");

                    b.ToTable("RobbingOrderAttachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrderStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("RobbingOrderStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrderStoreItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<Guid>("RobbingOrderId");

                    b.Property<Guid>("StoreItemId");

                    b.HasKey("Id");

                    b.HasIndex("RobbingOrderId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("RobbingOrderStoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasMaxLength(450);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<int?>("RobbingBudgetId");

                    b.Property<int>("StoreTypeId");

                    b.Property<int?>("TechnicalDepartmentId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RobbingBudgetId");

                    b.HasIndex("StoreTypeId");

                    b.HasIndex("TechnicalDepartmentId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Inventory.Data.Entities.StoreItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AdditionId");

                    b.Property<long>("BaseItemId");

                    b.Property<long>("BookId");

                    b.Property<int>("BookPageNumber");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CurrentItemStatusId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Note");

                    b.Property<string>("NoteCreatorId")
                        .HasMaxLength(450);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("Serial");

                    b.Property<int>("StoreId");

                    b.Property<int>("StoreItemStatusId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AdditionId");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("BookId");

                    b.HasIndex("CurrentItemStatusId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreItemStatusId");

                    b.ToTable("StoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.StoreItemHistory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("BookNumber");

                    b.Property<int>("BookPageNumber");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Note");

                    b.Property<string>("NoteCreatorName");

                    b.Property<string>("OperationCode")
                        .IsRequired();

                    b.Property<int>("OperationId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("StoreItemId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("StoreItemHistory");
                });

            modelBuilder.Entity("Inventory.Data.Entities.StoreItemStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StoreItemStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.StoreType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StoreType");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Inventory.Data.Entities.TechnicalDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TechnicianId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("TechnicalDepartment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Transformation", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int?>("BudgetId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FromStoreId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("RequestDate");

                    b.Property<string>("RequesterName");

                    b.Property<int>("Serial");

                    b.Property<int>("TenantId");

                    b.Property<int?>("ToExternalEntityId");

                    b.Property<int?>("ToStoreId");

                    b.Property<int?>("TransformationStatusId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("FromStoreId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ToExternalEntityId");

                    b.HasIndex("TransformationStatusId");

                    b.ToTable("Transformation");
                });

            modelBuilder.Entity("Inventory.Data.Entities.TransformationAttachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AttachmentId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("TransformationId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TransformationId");

                    b.ToTable("TransformationAttachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.TransformationStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TransformationStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.TransformationStoreItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Note");

                    b.Property<string>("NoteCreatorId")
                        .HasMaxLength(450);

                    b.Property<Guid>("StoreItemId");

                    b.Property<Guid>("TransformationId");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("TransformationId");

                    b.ToTable("TransformationStoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Inventory.Data.Entities.UserConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionId")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Device");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserConnection");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Addition", b =>
                {
                    b.HasOne("Inventory.Data.Entities.AdditionDocumentType", "AdditionDocumentType")
                        .WithMany("Addition")
                        .HasForeignKey("AdditionDocumentTypeId")
                        .HasConstraintName("FK_Addition_AdditionDocumentType");

                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany("Addition")
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("FK_Addition_Budget");

                    b.HasOne("Inventory.Data.Entities.ExaminationCommitte", "ExaminationCommitte")
                        .WithMany("Addition")
                        .HasForeignKey("ExaminationCommitteId")
                        .HasConstraintName("FK_Addition_ExaminationCommitte");

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("Addition")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_Addition_Operation");

                    b.HasOne("Inventory.Data.Entities.RobbingOrder", "RobbingOrder")
                        .WithMany()
                        .HasForeignKey("RobbingOrderId");

                    b.HasOne("Inventory.Data.Entities.Transformation", "Transformation")
                        .WithMany("Addition")
                        .HasForeignKey("TransformationId")
                        .HasConstraintName("FK_Addition_Transformation");
                });

            modelBuilder.Entity("Inventory.Data.Entities.AdditionAttachment", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Addition", "Addition")
                        .WithMany("AdditionAttachment")
                        .HasForeignKey("AdditionId")
                        .HasConstraintName("FK_AdditionAttachment_Addition");

                    b.HasOne("Inventory.Data.Entities.Attachment", "Attachment")
                        .WithMany("AdditionAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_AdditionAttachment_Attachment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Attachment", b =>
                {
                    b.HasOne("Inventory.Data.Entities.AttachmentType", "AttachmentType")
                        .WithMany("Attachment")
                        .HasForeignKey("AttachmentTypeId")
                        .HasConstraintName("FK_Attachment_AttachmentType1");
                });

            modelBuilder.Entity("Inventory.Data.Entities.BaseItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Unit", "DefaultUnit")
                        .WithMany("BaseItem")
                        .HasForeignKey("DefaultUnitId")
                        .HasConstraintName("FK_BaseItem_Unit");

                    b.HasOne("Inventory.Data.Entities.ItemCategory", "ItemCategory")
                        .WithMany("BaseItem")
                        .HasForeignKey("ItemCategoryId")
                        .HasConstraintName("FK_BaseItem_ItemCategory");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Book", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Store", "Store")
                        .WithMany("Book")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Book_Store");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeAttachment", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Attachment", "Attachment")
                        .WithMany("CommitteeAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_CommitteeAttachment_Attachment");

                    b.HasOne("Inventory.Data.Entities.ExaminationCommitte", "Committee")
                        .WithMany("CommitteeAttachment")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("FK_CommitteeAttachment_ExaminationCommitte");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeEmployee", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Employees", "Emplyee")
                        .WithMany("CommitteeEmployee")
                        .HasForeignKey("EmplyeeId")
                        .HasConstraintName("FK_CommitteeEmployee_Employees");

                    b.HasOne("Inventory.Data.Entities.ExaminationCommitte", "ExaminationCommitte")
                        .WithMany("CommitteeEmployee")
                        .HasForeignKey("ExaminationCommitteId")
                        .HasConstraintName("FK_CommitteeEmployee_ExaminationCommitte");

                    b.HasOne("Inventory.Data.Entities.JobTitle", "JobTitle")
                        .WithMany("CommitteeEmployee")
                        .HasForeignKey("JobTitleId")
                        .HasConstraintName("FK_CommitteeEmployee_JobTitle");
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.BaseItem", "BaseItem")
                        .WithMany("CommitteeItem")
                        .HasForeignKey("BaseItemId")
                        .HasConstraintName("FK_CommitteeItem_BaseItem");

                    b.HasOne("Inventory.Data.Entities.ExaminationCommitte", "ExaminationCommitte")
                        .WithMany("CommitteeItem")
                        .HasForeignKey("ExaminationCommitteId")
                        .HasConstraintName("FK_CommitteeItem_ExaminationCommitte");

                    b.HasOne("Inventory.Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Data.Entities.CommitteeItemHistory", b =>
                {
                    b.HasOne("Inventory.Data.Entities.CommitteeItem", "CommitteeItem")
                        .WithMany("CommitteeItemHistory")
                        .HasForeignKey("CommitteeItemId")
                        .HasConstraintName("FK_CommitteeItemHistory_CommitteeItem");

                    b.HasOne("Inventory.Data.Entities.HistoryAction", "HistoryAction")
                        .WithMany("CommitteeItemHistory")
                        .HasForeignKey("HistoryActionId")
                        .HasConstraintName("FK_CommitteeItemHistory_HistoryAction");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Employees", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Employees_Department");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExaminationCommitte", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany("ExaminationCommitte")
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("FK_ExaminationCommitte_Budget");

                    b.HasOne("Inventory.Data.Entities.ExaminationStatus", "ExaminationStatus")
                        .WithMany("ExaminationCommitte")
                        .HasForeignKey("ExaminationStatusId")
                        .HasConstraintName("FK_ExaminationCommitte_ExaminationStatus")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.ExternalEntity", "ExternalEntity")
                        .WithMany("ExaminationCommitte")
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_ExaminationCommitte_ExternalEntity");

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("ExaminationCommitte")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_ExaminationCommitte_Operation");

                    b.HasOne("Inventory.Data.Entities.Store", "Store")
                        .WithMany("ExaminationCommitte")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_ExaminationCommitte_Store");

                    b.HasOne("Inventory.Data.Entities.Supplier", "Supplier")
                        .WithMany("ExaminationCommitte")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_ExaminationCommitte_Supplier");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExchangeOrder", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany("ExchangeOrder")
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("FK_ExchangeOrder_Budget");

                    b.HasOne("Inventory.Data.Entities.ExchangeOrderStatus", "ExchangeOrderStatus")
                        .WithMany("ExchangeOrder")
                        .HasForeignKey("ExchangeOrderStatusId")
                        .HasConstraintName("FK_ExchangeOrder_ExchangeOrderStatus");

                    b.HasOne("Inventory.Data.Entities.Employees", "ForEmployee")
                        .WithMany("ExchangeOrder")
                        .HasForeignKey("ForEmployeeId")
                        .HasConstraintName("FK_ExchangeOrder_Employees");

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("ExchangeOrder")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_ExchangeOrder_Operation");
                });

            modelBuilder.Entity("Inventory.Data.Entities.ExchangeOrderStoreItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.ExchangeOrder", "ExchangeOrder")
                        .WithMany("ExchangeOrderStoreItem")
                        .HasForeignKey("ExchangeOrderId")
                        .HasConstraintName("FK_ExchangeOrderStoreItem_ExchangeOrder");

                    b.HasOne("Inventory.Data.Entities.StoreItem", "StoreItem")
                        .WithMany("ExchangeOrderStoreItem")
                        .HasForeignKey("StoreItemId")
                        .HasConstraintName("FK_ExchangeOrderStoreItem_StoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Invoice", b =>
                {
                    b.HasOne("Inventory.Data.Entities.ExchangeOrder", "ExchangeOrder")
                        .WithMany("Invoice")
                        .HasForeignKey("ExchangeOrderId")
                        .HasConstraintName("FK_Invoice_ExchangeOrder")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.Location", "Location")
                        .WithMany("Invoice")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Invoice_Locations");

                    b.HasOne("Inventory.Data.Entities.Employees", "ReceivedEmployee")
                        .WithMany("Invoice")
                        .HasForeignKey("ReceivedEmployeeId")
                        .HasConstraintName("FK_Invoice_Employees");

                    b.HasOne("Inventory.Data.Entities.RobbingOrder")
                        .WithMany("Invoice")
                        .HasForeignKey("RobbingOrderId");
                });

            modelBuilder.Entity("Inventory.Data.Entities.InvoiceStoreItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceStoreItem")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_InvoiceStoreItem_Invoice");

                    b.HasOne("Inventory.Data.Entities.StoreItem", "StoreItem")
                        .WithMany("InvoiceStoreItem")
                        .HasForeignKey("StoreItemId")
                        .HasConstraintName("FK_InvoiceStoreItem_StoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.OperationAttachmentType", b =>
                {
                    b.HasOne("Inventory.Data.Entities.AdditionDocumentType", "AdditionDocumentType")
                        .WithMany()
                        .HasForeignKey("AdditionDocumentTypeId");

                    b.HasOne("Inventory.Data.Entities.AttachmentType", "AttachmentType")
                        .WithMany("OperationAttachmentType")
                        .HasForeignKey("AttachmentTypeId")
                        .HasConstraintName("FK_OperationAttachmentType_AttachmentType");

                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("OperationAttachmentType")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_OperationAttachmentType_Operation");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrder", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany("RefundOrder")
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("FK_RefundOrder_Budget")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.Employees", "ExaminationEmployee")
                        .WithMany()
                        .HasForeignKey("ExaminationEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("RefundOrder")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_RefundOrder_Operation");

                    b.HasOne("Inventory.Data.Entities.RefundOrderStatus", "RefundOrderStatus")
                        .WithMany("RefundOrder")
                        .HasForeignKey("RefundOrderStatusId")
                        .HasConstraintName("FK_RefundOrder_RefundOrderStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrderAttachment", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Attachment", "Attachment")
                        .WithMany("RefundOrderAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_RefundOrderAttachment_Attachment");

                    b.HasOne("Inventory.Data.Entities.RefundOrder", "RefundOrder")
                        .WithMany("RefundOrderAttachment")
                        .HasForeignKey("RefundOrderId")
                        .HasConstraintName("FK_RefundOrderAttachment_RefundOrder");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RefundOrderStoreItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.RefundOrder", "RefundOrder")
                        .WithMany("RefundOrderStoreItem")
                        .HasForeignKey("RefundOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.StoreItemStatus", "StoreItemStatus")
                        .WithMany("RefundOrderStoreItem")
                        .HasForeignKey("StoreItemStatusId")
                        .HasConstraintName("FK_RefundOrderStoreItem_StoreItemStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrder", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany("RobbingOrder")
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("FK_RobbingOrder_Budget")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.Employees", "ForEmployee")
                        .WithMany()
                        .HasForeignKey("ForEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("RobbingOrder")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_RobbingOrder_Operation");

                    b.HasOne("Inventory.Data.Entities.RobbingOrderStatus", "RobbingOrderStatus")
                        .WithMany("RobbingOrder")
                        .HasForeignKey("RobbingOrderStatusId")
                        .HasConstraintName("FK_RobbingOrder_RobbingOrderStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrderAttachment", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Attachment", "Attachment")
                        .WithMany("RobbingOrderAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_RobbingOrderAttachment_Attachment");

                    b.HasOne("Inventory.Data.Entities.RobbingOrder", "RobbingOrder")
                        .WithMany("RobbingOrderAttachment")
                        .HasForeignKey("RobbingOrderId")
                        .HasConstraintName("FK_RobbingOrderAttachment_RobbingOrder");
                });

            modelBuilder.Entity("Inventory.Data.Entities.RobbingOrderStoreItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.RobbingOrder", "RobbingOrder")
                        .WithMany("RobbingOrderStoreItem")
                        .HasForeignKey("RobbingOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Data.Entities.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Data.Entities.Store", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Budget", "RobbingBudget")
                        .WithMany("Store")
                        .HasForeignKey("RobbingBudgetId")
                        .HasConstraintName("FK_Store_Budget");

                    b.HasOne("Inventory.Data.Entities.StoreType", "StoreType")
                        .WithMany("Store")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_Store_StoreType");

                    b.HasOne("Inventory.Data.Entities.TechnicalDepartment", "TechnicalDepartment")
                        .WithMany("Store")
                        .HasForeignKey("TechnicalDepartmentId")
                        .HasConstraintName("FK_Store_TechnicalDepartment");
                });

            modelBuilder.Entity("Inventory.Data.Entities.StoreItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Addition", "Addition")
                        .WithMany("StoreItem")
                        .HasForeignKey("AdditionId")
                        .HasConstraintName("FK_StoreItem_Addition");

                    b.HasOne("Inventory.Data.Entities.BaseItem", "BaseItem")
                        .WithMany("StoreItem")
                        .HasForeignKey("BaseItemId")
                        .HasConstraintName("FK_StoreItem_BaseItem");

                    b.HasOne("Inventory.Data.Entities.Book", "Book")
                        .WithMany("StoreItem")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_StoreItem_Book");

                    b.HasOne("Inventory.Data.Entities.ItemStatus", "CurrentItemStatus")
                        .WithMany("StoreItem")
                        .HasForeignKey("CurrentItemStatusId")
                        .HasConstraintName("FK_StoreItem_ItemStatusId");

                    b.HasOne("Inventory.Data.Entities.Store", "Store")
                        .WithMany("StoreItem")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreItem_Store");

                    b.HasOne("Inventory.Data.Entities.StoreItemStatus", "StoreItemStatus")
                        .WithMany("StoreItem")
                        .HasForeignKey("StoreItemStatusId")
                        .HasConstraintName("FK_StoreItem_StoreItemStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.StoreItemHistory", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("StoreItemHistory")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_StoreItemHistory_Operation");

                    b.HasOne("Inventory.Data.Entities.StoreItem", "StoreItem")
                        .WithMany("StoreItemHistory")
                        .HasForeignKey("StoreItemId")
                        .HasConstraintName("FK_StoreItemHistory_StoreItem");
                });

            modelBuilder.Entity("Inventory.Data.Entities.Transformation", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Budget", "Budget")
                        .WithMany("Transformation")
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("FK_Transformation_Budget");

                    b.HasOne("Inventory.Data.Entities.Store", "FromStore")
                        .WithMany("Transformation")
                        .HasForeignKey("FromStoreId")
                        .HasConstraintName("FK_Transformation_Store");

                    b.HasOne("Inventory.Data.Entities.Operation", "Operation")
                        .WithMany("Transformation")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_Transformation_Operation");

                    b.HasOne("Inventory.Data.Entities.ExternalEntity", "ToExternalEntity")
                        .WithMany("Transformation")
                        .HasForeignKey("ToExternalEntityId")
                        .HasConstraintName("FK_Transformation_ExternalEntity");

                    b.HasOne("Inventory.Data.Entities.TransformationStatus", "TransformationStatus")
                        .WithMany("Transformation")
                        .HasForeignKey("TransformationStatusId")
                        .HasConstraintName("FK_Transformation_TransformationStatus");
                });

            modelBuilder.Entity("Inventory.Data.Entities.TransformationAttachment", b =>
                {
                    b.HasOne("Inventory.Data.Entities.Attachment", "Attachment")
                        .WithMany("TransformationAttachment")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_TransformationAttachment_Attachment");

                    b.HasOne("Inventory.Data.Entities.Transformation", "Transformation")
                        .WithMany("TransformationAttachment")
                        .HasForeignKey("TransformationId")
                        .HasConstraintName("FK_TransformationAttachment_Transformation");
                });

            modelBuilder.Entity("Inventory.Data.Entities.TransformationStoreItem", b =>
                {
                    b.HasOne("Inventory.Data.Entities.StoreItem", "StoreItem")
                        .WithMany("TransformationStoreItem")
                        .HasForeignKey("StoreItemId")
                        .HasConstraintName("FK_TransformationStoreItem_StoreItem");

                    b.HasOne("Inventory.Data.Entities.Transformation", "Transformation")
                        .WithMany("TransformationStoreItem")
                        .HasForeignKey("TransformationId")
                        .HasConstraintName("FK_TransformationStoreItem_Transformation");
                });
#pragma warning restore 612, 618
        }
    }
}
